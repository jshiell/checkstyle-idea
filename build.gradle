import org.infernus.idea.checkstyle.build.CopyCheckstyleArtifactsToSandboxTask
import org.infernus.idea.checkstyle.build.CopyClassesToSandboxTask
import org.infernus.idea.checkstyle.build.CustomSourceSetCreator
import org.infernus.idea.checkstyle.build.GatherCheckstyleArtifactsTask
import org.infernus.idea.checkstyle.build.RunCsaccessTestsTask

buildscript {
    repositories {
        maven { url 'http://dl.bintray.com/jetbrains/intellij-plugin-service' }
    }
}

plugins {
    id 'java'
    id "org.jetbrains.intellij" version "0.1.10"
}

apply plugin: 'org.jetbrains.intellij'

intellij {
    version 'IC-15.0.6'
    pluginName 'CheckStyle-IDEA'
    updateSinceUntilBuild = false
}

sourceCompatibility = 1.8
version = '5.0.0'

repositories {
    mavenLocal()
    jcenter()
}

new CustomSourceSetCreator(project)
        .establishCsAccessSourceSet()
        .establishCsAccessTestSourceSet();

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//   Dependencies
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

dependencies {
    compile group: 'commons-io', name: 'commons-io', version: '2.4';

    // The Checkstyle version given here is the *base version* against which our code is initially compiled.
    // This is mostly for convenience, so we don't have to use reflection overly much. At runtime, the Checkstyle
    // version will depend on the plugin configuration.
    csaccessCompile (group: 'com.puppycrawl.tools', name: 'checkstyle', version: '7.1.1') {
        exclude group: 'commons-logging', module: 'commons-logging';
    }

    testCompile group: 'junit', name: 'junit', version: '4.12';
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3';
    testCompile group: 'org.mockito', name: 'mockito-core', version: '1.10.19';
    testCompile files("${System.properties['java.home']}/../lib/tools.jar")
}


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//   Tests
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

ext {
    // testConfigClosure is used by both tasks 'test' and 'runCsaccessTests':
    testConfigClosure = {
        // beforeTest { final TestDescriptor descriptor ->
        //     logger.lifecycle("Running test: " + descriptor)
        // }
        afterSuite { final TestDescriptor descriptor, final TestResult testResult ->
            if (descriptor.getParent() == null) {
                logger.lifecycle('\r\t' + testResult.testCount + ' tests executed, ' +
                        testResult.successfulTestCount + ' successful, ' +
                        testResult.skippedTestCount + ' skipped.');
            }
        }
    }
}
test((Closure) testConfigClosure);
tasks.create(RunCsaccessTestsTask.NAME, RunCsaccessTestsTask.class);


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//   Extra tasks for getting Checkstyle in different versions into the plugin distribution
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

tasks.create(GatherCheckstyleArtifactsTask.NAME, GatherCheckstyleArtifactsTask.class);
task copyCheckstyleArtifactsToSandbox(type: CopyCheckstyleArtifactsToSandboxTask);
task copyCheckstyleArtifactsToTestSandbox(type: CopyCheckstyleArtifactsToSandboxTask) { setTest(); }
task copyClassesToSandbox(type: CopyClassesToSandboxTask);
task copyClassesToTestSandbox(type: CopyClassesToSandboxTask) { setTest(); }

// Defer some of the wiring until after the intellij plugin's tasks have been created:
tasks.all { final Task task ->
    if ('buildPlugin' == task.name || 'runIdea' == task.name) {
        task.dependsOn((Task) copyCheckstyleArtifactsToSandbox);
        task.dependsOn tasks['copyClassesToSandbox'];
    }
    else if ('prepareSandbox' == task.name) {
        tasks['copyCheckstyleArtifactsToSandbox'].dependsOn task;
        tasks['copyClassesToSandbox'].dependsOn task;
    }
    else if ('prepareTestsSandbox' == task.name) {
        tasks['copyCheckstyleArtifactsToTestSandbox'].dependsOn task;
        tasks['copyClassesToTestSandbox'].dependsOn task;
    }
}
