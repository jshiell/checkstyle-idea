plugins {
    id 'java'
    id 'jacoco'
    id 'idea'
    id 'org.jetbrains.intellij' version '1.17.2'
    id 'com.dorongold.task-tree' version '2.1.1'
    id 'org.infernus.idea.checkstyle.build'
}


repositories {
    mavenCentral()
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//   Project Metadata
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

version = '5.91.0'

intellij {
    version = 'IC-2023.1.5'
    pluginName = 'CheckStyle-IDEA'
    updateSinceUntilBuild = false
    instrumentCode = false
    plugins = ['java']
}

verifyPlugin {
    dependsOn(copyClassesToSandbox)
    dependsOn(copyCheckstyleArtifactsToSandbox)
}

publishPlugin {
    token.set(System.getenv("JETBRAINS_PLUGIN_REPO_TOKEN"))
}

// workaround for Checkstyle#14123
configurations.configureEach {
    resolutionStrategy.capabilitiesResolution.withCapability("com.google.collections:google-collections") {
        select("com.google.guava:guava:0")
    }
}


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//   Compilation
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:deprecation'
    options.release.set(17)

    if (it.name == 'compileCsaccessJava' || it.name == 'compileCsaccessTestJava') {
        options.compilerArgs << '-Xlint:unchecked'
    }
}

test {
    forkEvery = 1
}

tasks.named("classpathIndexCleanup") {
    dependsOn(tasks.named("processCsaccessResources"))
    dependsOn(tasks.named("processCsaccessTestResources"))
    dependsOn(tasks.named("compileCsaccessJava"))
    dependsOn(tasks.named("compileCsaccessTestJava"))
}


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//   Dependencies
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

dependencies {
    implementation group: 'commons-io', name: 'commons-io', version: '2.15.1'
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.16.0'

    csaccessCompileOnly ("com.puppycrawl.tools:checkstyle:${supportedCsVersions.getBaseVersion()}") {
        exclude group: 'commons-logging', module: 'commons-logging'
    }

    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
    testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.5.0'
}


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//   IntelliJ IDEA Config
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

idea.module {
    downloadJavadoc = true
    downloadSources = true
    excludeDirs += file('.idea')
    excludeDirs += file('_support')

    // TODO We should also tell IntelliJ automatically that csaccessTest contains test code.
    // The following lines should really do it, but currently don't, which seems like a Gradle bug to me:
    //def SourceSet catSourceSet = sourceSets.getByName(CustomSourceSetCreator.CSACCESSTEST_SOURCESET_NAME);
    //testSourceDirs += catSourceSet.getJava().getSrcDirs();
    //testSourceDirs += catSourceSet.getResources().getSrcDirs();
    //scopes.TEST.plus += [configurations.getByName(catSourceSet.getRuntimeConfigurationName())];
}
