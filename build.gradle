import org.infernus.idea.checkstyle.build.CheckstyleVersions
import org.infernus.idea.checkstyle.build.CopyCheckstyleArtifactsToSandboxTask
import org.infernus.idea.checkstyle.build.CopyClassesToSandboxTask
import org.infernus.idea.checkstyle.build.CsaccessTestTask
import org.infernus.idea.checkstyle.build.CustomSourceSetCreator
import org.infernus.idea.checkstyle.build.GatherCheckstyleArtifactsTask

buildscript {
    repositories {
        maven { url 'http://dl.bintray.com/jetbrains/intellij-plugin-service' }
    }
}
plugins {
    id 'java'
    id 'jacoco'
    id 'idea'
    id 'org.jetbrains.intellij' version '0.1.10'
}

repositories {
    mavenLocal()
    jcenter()
}

sourceCompatibility = 1.8
version = '5.0.0'

intellij {
    version = 'IC-15.0.6';
    pluginName 'CheckStyle-IDEA'
    updateSinceUntilBuild = false
}

new CustomSourceSetCreator(project)
        .establishCsAccessSourceSet()
        .establishCsAccessTestSourceSet();

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8';
    options.compilerArgs << '-Xlint:deprecation';
    if (it.name == 'compileCsaccessJava' || it.name == 'compileCsaccessTestJava') {
        options.compilerArgs << '-Xlint:unchecked';
    }
}


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//   Dependencies
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

ext {
    supportedCsVersions = new CheckstyleVersions(project);
}

dependencies {
    compile group: 'commons-io', name: 'commons-io', version: '2.4';

    csaccessCompileOnly ("com.puppycrawl.tools:checkstyle:${supportedCsVersions.getBaseVersion()}") {
        exclude group: 'commons-logging', module: 'commons-logging';
    }

    testCompile group: 'junit', name: 'junit', version: '4.12';
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3';
    testCompile group: 'org.mockito', name: 'mockito-core', version: '1.10.19';
    testCompile files("${System.properties['java.home']}/../lib/tools.jar")
}


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//   Tests
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

ext {
    // testConfigClosure is used by all tasks of type Test (runCsaccessTests, test, xtest_*):
    testConfigClosure = {
        testLogging {
            showStackTraces = true;
            showExceptions = true;
            showCauses = true;
            //showStandardStreams = true;
            exceptionFormat 'full'
        }
        afterSuite { final TestDescriptor descriptor, final TestResult testResult ->
            if (descriptor.getParent() == null) {
                logger.lifecycle('\r\t' + testResult.testCount + ' tests executed, ' +
                        testResult.successfulTestCount + ' successful, ' +
                        testResult.skippedTestCount + ' skipped.');
            }
        }
    }
}
test((Closure) testConfigClosure);
Task rct = tasks.create(CsaccessTestTask.NAME, CsaccessTestTask.class);
rct.setCheckstyleVersion((String) supportedCsVersions.baseVersion, true);
tasks.test.dependsOn rct;


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//   Cross-check 'csaccessTest' unit tests against the different Checkstyle runtimes
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

task xtest {
    setGroup(LifecycleBasePlugin.VERIFICATION_GROUP);
    setDescription('Runs the \'' + CustomSourceSetCreator.CSACCESSTEST_SOURCESET_NAME +
            '\' unit tests against all supported Checkstyle runtimes.');
}
tasks.check.dependsOn tasks.xtest;
supportedCsVersions.versions.each { final String csVersion ->
    if (supportedCsVersions.baseVersion != csVersion) {
        CsaccessTestTask xt = tasks.create(CsaccessTestTask.getTaskName(csVersion), CsaccessTestTask.class);
        xt.setCheckstyleVersion(csVersion, false);
        tasks.xtest.dependsOn(xt);
    }
}


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//   Exclusive test coverage report for 'csaccess' classes
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

test.jacoco.enabled = false;
task jacocoTestReport4csaccess(type: JacocoReport, dependsOn: tasks.withType(CsaccessTestTask)) {
    description 'Generate exclusive JaCoCo test report on the \'' + CustomSourceSetCreator.CSACCESS_SOURCESET_NAME +
            '\' classes';
    reports {
        xml.enabled = true;
        csv.enabled = false;
        html.enabled = true;
    }
    def SourceSet csaccessSourceSet = sourceSets.getByName(CustomSourceSetCreator.CSACCESS_SOURCESET_NAME);
    classDirectories = files(csaccessSourceSet.output.classesDir);
    sourceDirectories = csaccessSourceSet.java.sourceDirectories;
    executionData = files(tasks.withType(CsaccessTestTask)*.name.collect {
        new File("${buildDir}/jacoco", "${it}.exec")
    });
    // TODO We should fail the build if a certain coverage is not reached. This will be possible with Gradle 4.0 (see
    // https://github.com/gradle/gradle/issues/824) or with a handcrafted workaround such as
    // https://github.com/springfox/springfox/blob/fb780ee1f14627b239fba95730a69900b9b2313a/gradle/coverage.gradle
}
tasks.remove(tasks.jacocoTestReport);
tasks.xtest.dependsOn tasks.jacocoTestReport4csaccess;


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//   Extra tasks for packaging Checkstyle in different versions into the plugin distribution
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

tasks.create(GatherCheckstyleArtifactsTask.NAME, GatherCheckstyleArtifactsTask.class);
task copyCheckstyleArtifactsToSandbox(type: CopyCheckstyleArtifactsToSandboxTask);
task copyCheckstyleArtifactsToTestSandbox(type: CopyCheckstyleArtifactsToSandboxTask) { setTest(); }
task copyClassesToSandbox(type: CopyClassesToSandboxTask);
task copyClassesToTestSandbox(type: CopyClassesToSandboxTask) { setTest(); }

// Defer some of the wiring until after the intellij plugin's tasks have been created:
tasks.all { final Task task ->
    if ('buildPlugin' == task.name || 'runIdea' == task.name) {
        task.dependsOn(tasks.copyCheckstyleArtifactsToSandbox);
        task.dependsOn tasks['copyClassesToSandbox'];
    }
    else if ('prepareSandbox' == task.name) {
        tasks['copyCheckstyleArtifactsToSandbox'].dependsOn task;
        tasks['copyClassesToSandbox'].dependsOn task;
    }
    else if ('prepareTestsSandbox' == task.name) {
        tasks['copyCheckstyleArtifactsToTestSandbox'].dependsOn task;
        tasks['copyClassesToTestSandbox'].dependsOn task;
    }
}


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//   Configure IntelliJ IDEA
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

idea.project {
    languageLevel = JavaVersion.VERSION_1_8;
}
idea.module {
    downloadJavadoc = true;
    downloadSources = true;
    excludeDirs += file('.idea');
    excludeDirs += file('_support');
    // TODO We should also tell IntelliJ automatically that csaccessTest contains test code.
    // The following lines should really do it, but currently don't, which seems like a Gradle bug to me:
    //def SourceSet catSourceSet = sourceSets.getByName(CustomSourceSetCreator.CSACCESSTEST_SOURCESET_NAME);
    //testSourceDirs += catSourceSet.getJava().getSrcDirs();
    //testSourceDirs += catSourceSet.getResources().getSrcDirs();
    //scopes.TEST.plus += [configurations.getByName(catSourceSet.getRuntimeConfigurationName())];
}
