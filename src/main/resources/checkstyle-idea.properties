# Checkstyle-IDEA plugin configuration

# Supported Checkstyle versions, sorted by required Java level. The sorting by required Java level is useful because
# it allows us to offer only such versions which can actually run in the current IntelliJ instance. The plugin, and
# current versions of IntelliJ, already require Java 8, so the Java 7 distinction is just an example, until Java 9
# is released.

# Version 6.3 and 6.4 are left out because they are old and were never supported by the IDE plugins.
# Versions 6.8, 6.8.1, 6.11, 6.11.1, 6.14, 6.17, 6.18, and 7.0 are left out because the next highest supported version
# is a good compatible replacement, and we want to keep the plugin from growing too much.
# Version 6.10 was superseded by 6.10.1 on the day of its release, so we think nobody should want it, even though
# 6.10.1 is not fully compatible with 6.10.
# Version 6.16 is left out because it's broken, see https://github.com/checkstyle/checkstyle/issues/2997.

checkstyle.versions.java7 = 6.2, 6.4.1, 6.5, 6.6, 6.7, 6.8.2, 6.9, 6.10.1, 6.11.2, 6.12, 6.12.1, 6.13, 6.14.1, 6.15, \
    6.16.1, 6.19
checkstyle.versions.java8 = 7.1, 7.1.1, 7.1.2, 7.2, 7.3, 7.4, 7.5.1, 7.6, 7.6.1, 7.8.2, 8.0, 8.1, 8.2

# The "base version" must be one of the versions listed above. The sources are compiled against this version, so it is
# the dependency shown in the IDE and the runtime used when unit tests are run from the IDE or via 'runCsaccessTests'.
baseVersion = 7.1.1

# Maps unsupported Checkstyle versions onto their supported alternative versions. If one of the keys in this map is
# found in the plugin configuration the value in this map is used instead. A mapping is valid only if both check
# behavior and API are compatible: http://checkstyle-addons.thomasjensen.com/checkstyle-compatibility-matrix.html
checkstyle.versions.map = 6.8 -> 6.8.2, 6.8.1 -> 6.8.2, 6.11 -> 6.11.2, 6.11.1 -> 6.11.2, 6.14 -> 6.14.1, \
    6.17 -> 6.19, 6.18 -> 6.19, 7.0 -> 7.1, 7.5 -> 7.5.1, 7.7 -> 7.8.2, 7.8 -> 7.8.2, 7.8.1 -> 7.8.2
